{"version":3,"sources":["components/Header.js","components/SearchBoxInput.js","components/SearchBox.js","components/SearchResultRow.js","components/ArrowSVG.js","components/SearchResult.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","SearchBoxInput","props","type","name","inputName","id","inputId","placeholder","onChange","updateFormInputs","onBlur","required","errorType","SearchBox","getWeather","_callee","e","city","country","callAPI","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","_this","updateState","isLoading","fetch","concat","sent","json","location","sys","temperature","calculateTemp","main","temp","humidity","conditions","capitalize","weather","description","error","showResult","t0","message","touched","stop","this","Object","defineProperty","countryCode","cityError","countryError","validateFormError","onSubmit","noValidate","components_SearchBoxInput","Component","SearchResultRow","label","ArrowSVG","xmlns","viewBox","height","y","points","SearchResult","clear","style","fontSize","components_ArrowSVG","components_SearchResultRow","onClick","App","state","autocompleteData","setState","_ref","_ref2","toArray","first","rest","slice","toUpperCase","join","toLowerCase","dayTimeTemp","Math","round","componentDidMount","countriesData","citiesData","countriesWithCodes","i","obj","citiesClone","require","length","alpha2Code","push","JSON","parse","stringify","countries","cities","components_Header","components_SearchBox","components_SearchResult","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc7232ef.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => (\r\n  <div className=\"header\">\r\n    <h1 className=\"font-weight-normal\">\r\n      World<span className=\"font-weight-light\">Weather</span>\r\n    </h1>\r\n    <small>Weather by City and Country Across the World</small>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst SearchBoxInput = props => (\r\n  <div className=\"form-group\">\r\n    <input\r\n      type=\"text\"\r\n      name={props.inputName}\r\n      className=\"form-control\"\r\n      id={props.inputId}\r\n      placeholder={props.placeholder}\r\n      onChange={props.updateFormInputs}\r\n      onBlur={props.updateFormInputs}\r\n      required={props.errorType}\r\n    />\r\n    {props.errorType ? (\r\n      <div className=\"invalid-feedback\">Please enter {props.placeholder} field</div>\r\n    ) : null}\r\n  </div>\r\n);\r\n\r\nexport default SearchBoxInput;\r\n","import React, { Component } from \"react\";\r\nimport SearchBoxInput from \"./SearchBoxInput\";\r\n\r\n//import Autocomplete from \"react-autocomplete\";\r\n//let selectedValue = \"\";\r\n\r\nclass SearchBox extends Component {\r\n  getWeather = async e => {\r\n    e.preventDefault();\r\n    const api_key = \"01f0312628c56d7fcadfdee00da7c7a3\";\r\n    let api_base_url = \"https://api.openweathermap.org/data/2.5/weather?q=\";\r\n    let city = e.target.elements.city.value;\r\n    let country = e.target.elements.country.value;\r\n\r\n    if (city && country) {\r\n      try {\r\n        this.props.updateState({\r\n          isLoading: true\r\n        });\r\n        const callAPI = await fetch(`${api_base_url}${city},${country}&appid=${api_key}`);\r\n\r\n        const data = await callAPI.json();\r\n\r\n        this.props.updateState({\r\n          location: `${data.name} City, ${data.sys.country}`,\r\n          temperature: this.props.calculateTemp(data.main.temp),\r\n          humidity: `${data.main.humidity}%`,\r\n          conditions: this.props.capitalize(data.weather[0].description),\r\n          error: \"\",\r\n          city: `${city}`,\r\n          country: `${country}`,\r\n          showResult: true,\r\n          isLoading: false\r\n        });\r\n      } catch (error) {\r\n        this.props.updateState({\r\n          error: error.message,\r\n          isLoading: false\r\n        });\r\n      }\r\n    } else {\r\n      this.props.updateState({\r\n        touched: {\r\n          city: true,\r\n          country: true\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  updateFormInputs = e => {\r\n    e.preventDefault();\r\n    this.props.updateState({ [e.target.name]: e.target.value });\r\n    if (e.target.name === \"city\") {\r\n      this.props.updateState({\r\n        city: e.target.value,\r\n        touched: {\r\n          city: true,\r\n          country: this.props.touched.country\r\n        }\r\n      });\r\n    }\r\n    if (e.target.name === \"country\") {\r\n      this.props.updateState({\r\n        country: e.target.value,\r\n        touched: {\r\n          city: this.props.touched.city,\r\n          country: true\r\n        },\r\n        countryCode: e.target.value\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const cityError = !this.props.city && this.props.touched.city;\r\n    const countryError = !this.props.country && this.props.touched.country;\r\n    const errorCondition = cityError || countryError;\r\n    const validateFormError = errorCondition ? \"was-validated\" : \"\";\r\n    return (\r\n      <form\r\n        id=\"weatherForm\"\r\n        onSubmit={this.getWeather}\r\n        className={\"needs-validation \" + validateFormError}\r\n        noValidate\r\n      >\r\n        <SearchBoxInput\r\n          inputName=\"city\"\r\n          inputId=\"city\"\r\n          placeholder=\"City\"\r\n          updateFormInputs={this.updateFormInputs}\r\n          errorType={cityError}\r\n        />\r\n        <SearchBoxInput\r\n          inputName=\"country\"\r\n          inputId=\"country\"\r\n          placeholder=\"Country\"\r\n          updateFormInputs={this.updateFormInputs}\r\n          errorType={countryError}\r\n        />\r\n        <div className=\"form-group\">\r\n          <button className=\"btn btn-main btn-md btn-block\">\r\n            <span className=\"btn-text\">Get Weather</span>\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst SearchResultRow = props => (\r\n  <div className=\"row\">\r\n    <div className=\"col-md-3 text-lg-left\">\r\n      <label className=\"font-weight-bold list-header mr-1\">{props.label}</label>\r\n    </div>\r\n    <div className=\"col-md-6 text-lg-left\">\r\n      <span>{props.value}</span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default SearchResultRow;\r\n","import React from \"react\";\r\n\r\nconst ArrowSVG = () => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\">\r\n    <svg viewBox=\"0 0 150 300\" height=\"100px\" y=\"20%\">\r\n      <polygon className=\"polygon\" points=\"70 25,5 80,10 85,70 30,135 85,140 80\" />\r\n      <polygon className=\"polygon\" points=\"70 55,10 107.5,12.5 110,70 60,132.5 110,135.5 107.5\" />\r\n    </svg>\r\n  </svg>\r\n);\r\nexport default ArrowSVG;\r\n","import React, { Component } from \"react\";\r\nimport SearchResultRow from \"./SearchResultRow\";\r\nimport ArrowSVG from \"./ArrowSVG\";\r\nclass SearchResult extends Component {\r\n  clear = e => {\r\n    e.preventDefault();\r\n\r\n    const resetForm = id => {\r\n      //document.getElementById(id).reset();\r\n    };\r\n\r\n    resetForm(\"weatherForm\");\r\n\r\n    this.props.updateState({\r\n      location: \"\",\r\n      temperature: \"\",\r\n      humidity: \"\",\r\n      conditions: \"\",\r\n      touched: {\r\n        city: false,\r\n        country: false\r\n      },\r\n      city: \"\",\r\n      country: \"\",\r\n      showResult: false,\r\n      value: \"\",\r\n      countryCode: \"\"\r\n    });\r\n  };\r\n  render() {\r\n    const showResult = this.props.showResult;\r\n    const isLoading = this.props.isLoading;\r\n    return (\r\n      <div className=\"search-result \">\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-4\">\r\n            <i\r\n              className={\"mt-5 \" + (isLoading ? \"fa fa-circle-o-notch fa-spin\" : \"\")}\r\n              style={{ fontSize: \"60px\" }}\r\n            />\r\n            <div className={\"arrow \" + (showResult ? \"d-none\" : \"\")}>\r\n              <ArrowSVG />\r\n              <p>Enter a location above to get started</p>\r\n            </div>\r\n            <div className={!showResult ? \"d-none\" : \"\"}>\r\n              <div className=\"row-bordered-s\">\r\n                <SearchResultRow label=\"Location\" value={this.props.location} />\r\n              </div>\r\n              <div className=\"row-bordered-o\">\r\n                <SearchResultRow label=\"Temperature\" value={this.props.temperature} />\r\n              </div>\r\n              <div className=\"row-bordered-s\">\r\n                <SearchResultRow label=\"Humidity\" value={this.props.humidity} />\r\n              </div>\r\n              <div className=\"row-bordered-o\">\r\n                <SearchResultRow label=\"Conditions\" value={this.props.conditions} />\r\n              </div>\r\n              <button className=\"btn btn-clear btn-md btn-block mt-3\" onClick={this.clear}>\r\n                <span className=\"btn-text\">Clear</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SearchResult;\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport SearchBox from \"./components/SearchBox\";\nimport SearchResult from \"./components/SearchResult\";\n\nclass App extends Component {\n  state = {\n    location: \"\",\n    temperature: \"\",\n    humidity: \"\",\n    conditions: \"\",\n    touched: {\n      city: false,\n      country: false\n    },\n    city: \"\",\n    country: \"\",\n    showResult: false,\n    isLoading: false,\n    value: \"\",\n    autocompleteData: []\n  };\n  updateState = state => {\n    this.setState(state);\n  };\n  capitalize = ([first, ...rest]) => first.toUpperCase() + rest.join(\"\").toLowerCase();\n\n  calculateTemp = temp => {\n    const tempSign = \"°F\";\n    const dayTimeTemp = Math.round(1.8 * (temp - 273.15) + 32);\n\n    return `${dayTimeTemp}${tempSign}`;\n  };\n\n  componentDidMount = async () => {\n    // This part is for Autocomplete inputs for SearchBox\n    // will continue work on it later\n    const countriesData = require(\"./api/countries\");\n    const citiesData = require(\"./api/country_codes_cities\");\n\n    const countriesWithCodes = [];\n\n    if (countriesData) {\n      for (let i = 0; i < countriesData.length; i++) {\n        let obj = {};\n        obj.label = countriesData[i].name;\n        obj.value = countriesData[i].alpha2Code;\n        countriesWithCodes.push(obj);\n      }\n\n      var citiesClone = JSON.parse(JSON.stringify(citiesData));\n\n      this.setState({\n        countries: countriesWithCodes,\n        autocompleteData: countriesWithCodes,\n        cities: citiesClone\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container-fluid\">\n            <div className=\"row justify-content-center align-items-center\">\n              <div className=\"col-4\">\n                <div className=\"form-group\">\n                  <Header />\n                </div>\n                <SearchBox\n                  city={this.state.city}\n                  country={this.state.country}\n                  error={this.state.error}\n                  touched={this.state.touched}\n                  countries={this.state.countries}\n                  updateState={this.updateState}\n                  value={this.state.value}\n                  autocompleteData={this.state.autocompleteData}\n                  capitalize={this.capitalize}\n                  calculateTemp={this.calculateTemp}\n                />\n              </div>\n            </div>\n          </div>\n          <SearchResult\n            location={this.state.location}\n            temperature={this.state.temperature}\n            humidity={this.state.humidity}\n            conditions={this.state.conditions}\n            error={this.state.error}\n            showResult={this.state.showResult}\n            isLoading={this.state.isLoading}\n            updateState={this.updateState}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"./App.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}